// Script de diagn√≥stico completo para identificar problemas com os dados

import { initializeApp } from "firebase/app"
import { getFirestore, collection, getDocs, limit, query } from "firebase/firestore"

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
}

console.log("üîß DIAGN√ìSTICO COMPLETO - DADOS N√ÉO APARECEM")
console.log("=".repeat(60))

// 1. Verificar vari√°veis de ambiente
console.log("1Ô∏è‚É£ VERIFICANDO VARI√ÅVEIS DE AMBIENTE")
console.log("-".repeat(40))
console.log("API_KEY:", process.env.NEXT_PUBLIC_FIREBASE_API_KEY ? "‚úÖ Definida" : "‚ùå N√£o definida")
console.log("AUTH_DOMAIN:", process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN ? "‚úÖ Definida" : "‚ùå N√£o definida")
console.log("PROJECT_ID:", process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID ? "‚úÖ Definida" : "‚ùå N√£o definida")
console.log("STORAGE_BUCKET:", process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET ? "‚úÖ Definida" : "‚ùå N√£o definida")
console.log(
  "MESSAGING_SENDER_ID:",
  process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID ? "‚úÖ Definida" : "‚ùå N√£o definida",
)
console.log("APP_ID:", process.env.NEXT_PUBLIC_FIREBASE_APP_ID ? "‚úÖ Definida" : "‚ùå N√£o definida")
console.log("")

async function diagnosticarProblema() {
  try {
    // 2. Testar conex√£o Firebase
    console.log("2Ô∏è‚É£ TESTANDO CONEX√ÉO FIREBASE")
    console.log("-".repeat(40))

    const app = initializeApp(firebaseConfig)
    console.log("‚úÖ Firebase inicializado com sucesso")

    const db = getFirestore(app)
    console.log("‚úÖ Firestore conectado")
    console.log("")

    // 3. Verificar se a cole√ß√£o existe
    console.log("3Ô∏è‚É£ VERIFICANDO COLE√á√ÉO 'hospitais'")
    console.log("-".repeat(40))

    const hospitaisRef = collection(db, "hospitais")
    console.log("‚úÖ Refer√™ncia da cole√ß√£o criada")

    // 4. Tentar buscar documentos
    console.log("4Ô∏è‚É£ BUSCANDO DOCUMENTOS")
    console.log("-".repeat(40))

    const snapshot = await getDocs(query(hospitaisRef, limit(5)))
    console.log(`üìä Documentos encontrados: ${snapshot.size}`)

    if (snapshot.empty) {
      console.log("‚ùå PROBLEMA: Cole√ß√£o est√° vazia!")
      console.log("   Poss√≠veis causas:")
      console.log("   - Cole√ß√£o n√£o existe")
      console.log("   - Regras de seguran√ßa bloqueando acesso")
      console.log("   - Projeto Firebase incorreto")
      return
    }

    // 5. Analisar estrutura dos documentos
    console.log("5Ô∏è‚É£ ANALISANDO ESTRUTURA DOS DOCUMENTOS")
    console.log("-".repeat(40))

    let docCount = 0
    snapshot.forEach((doc) => {
      docCount++
      const data = doc.data()

      console.log(`üìÑ Documento ${docCount}: ${doc.id}`)
      console.log(`   Campos dispon√≠veis: ${Object.keys(data).join(", ")}`)

      // Verificar campos essenciais
      console.log(`   nome: ${data.nome ? "‚úÖ" : "‚ùå"} (${data.nome || "N/A"})`)
      console.log(`   UF: ${data.UF ? "‚úÖ" : "‚ùå"} (${data.UF || "N/A"})`)
      console.log(`   municipio: ${data.municipio ? "‚úÖ" : "‚ùå"} (${data.municipio || "N/A"})`)
      console.log(`   historico: ${data.historico ? "‚úÖ" : "‚ùå"}`)

      if (data.historico) {
        const anos = Object.keys(data.historico)
        console.log(`   Anos no hist√≥rico: ${anos.join(", ")}`)

        // Verificar primeiro ano
        if (anos.length > 0) {
          const primeiroAno = anos[0]
          const dadosAno = data.historico[primeiroAno]
          console.log(`   Estrutura ${primeiroAno}: ${Object.keys(dadosAno).join(", ")}`)

          if (dadosAno.leitos) {
            console.log(`   Leitos ${primeiroAno}: ${Object.keys(dadosAno.leitos).join(", ")}`)
            console.log(`   Total leitos: ${dadosAno.leitos.total || "N/A"}`)
          } else {
            console.log(`   ‚ùå Sem dados de leitos em ${primeiroAno}`)
          }
        }
      } else {
        console.log(`   ‚ùå Sem hist√≥rico`)
      }

      console.log("")
    })

    // 6. Testar API endpoint
    console.log("6Ô∏è‚É£ TESTANDO API ENDPOINT")
    console.log("-".repeat(40))

    try {
      const response = await fetch("http://localhost:3000/api/hospitais")
      console.log(`Status da API: ${response.status}`)

      if (response.ok) {
        const apiData = await response.json()
        console.log(`‚úÖ API retornou ${apiData.length} hospitais`)

        if (apiData.length > 0) {
          console.log("üìÑ Primeiro hospital da API:")
          console.log(JSON.stringify(apiData[0], null, 2))
        }
      } else {
        console.log(`‚ùå API retornou erro: ${response.statusText}`)
      }
    } catch (apiError) {
      console.log(`‚ùå Erro ao chamar API: ${apiError.message}`)
      console.log("   Certifique-se de que o servidor est√° rodando")
    }

    console.log("")
    console.log("7Ô∏è‚É£ RESUMO DO DIAGN√ìSTICO")
    console.log("-".repeat(40))
    console.log(`‚úÖ Firebase conectado: Sim`)
    console.log(`‚úÖ Documentos encontrados: ${snapshot.size}`)
    console.log(`‚úÖ Estrutura de dados: ${docCount > 0 ? "Analisada" : "N√£o dispon√≠vel"}`)
  } catch (error) {
    console.error("‚ùå ERRO CR√çTICO:", error)
    console.log("")
    console.log("üîç POSS√çVEIS SOLU√á√ïES:")
    console.log("1. Verificar se as vari√°veis de ambiente est√£o corretas")
    console.log("2. Verificar regras de seguran√ßa do Firestore")
    console.log("3. Verificar se o projeto Firebase est√° ativo")
    console.log("4. Verificar conex√£o com internet")
  }
}

// Executar diagn√≥stico
diagnosticarProblema()
